# 123. 买卖股票的最佳时机 III
# 给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
#
# 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
#
# 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
#
#
#
# 示例 1:
#
# 输入：prices = [3,3,5,0,0,3,1,4]
# 输出：6
# 解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
# 随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
# 示例 2：
#
# 输入：prices = [1,2,3,4,5]
# 输出：4
# 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
# 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
# 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
# 示例 3：
#
# 输入：prices = [7,6,4,3,1]
# 输出：0
# 解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
# 示例 4：
#
# 输入：prices = [1]
# 输出：0
#
#
# 提示：
#
# 1 <= prices.length <= 105
# 0 <= prices[i] <= 105

class Solution:
    def maxProfit(self, prices: [int]) -> int:
        # 动态规划：时间复杂度度O(k*n) k未最多允许交易的次数，此题是2；空间复杂度O(k)；
        # step1： 状态的定义
        dp = [[float('-inf')] * 2 for _ in range(3)]  # 第一维代表还可以交易的次数：i次 i等于未知索引；第二维代表是否持有股票，位置0不持有，位置1持有
        k = len(dp) - 1
        dp[2][0] = 0
        max_val = 0
        for price in prices:
            for j in range(k):  # 从前往后，这样可以复用dp; 不需要还可以交易k次的数据，因为dp[k][0] 和 dp[k][1] 初始值就是最大值
                # step2 : 状态转移
                dp[j][0] = max(dp[j][0], dp[j][1] + price)
                # dp[j][1] = max(dp[j][1], dp[j + 1][0] - price if j < k else float('-inf'))
                dp[j][1] = max(dp[j][1], dp[j + 1][0] - price)
                max_val = max(max_val, dp[j][0])  # 随时记录最大值
        return max_val
