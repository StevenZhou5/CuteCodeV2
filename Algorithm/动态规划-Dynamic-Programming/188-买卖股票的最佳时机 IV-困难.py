# 188. 买卖股票的最佳时机 IV
# 给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。
#
# 设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。
#
# 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
#
#
#
# 示例 1：
#
# 输入：k = 2, prices = [2,4,1]
# 输出：2
# 解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。
# 示例 2：
#
# 输入：k = 2, prices = [3,2,6,5,0,3]
# 输出：7
# 解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
# 随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。
#
#
# 提示：
#
# 0 <= k <= 100
# 0 <= prices.length <= 1000
# 0 <= prices[i] <= 1000
class Solution:
    def maxProfit(self, k: int, prices: [int]) -> int:
        # 动态规划： 时间复杂度O(n * k); 空间复杂度O(k); n 为prices的长度
        # step1：状态定义
        dp = [[float('-inf')] * 2 for _ in range(k + 1)]  # dp[i][0] 代表还可以交易i次，此时不持有股票的最大值；dp[i][1] 代表还可以交易i次，此时持有股票的最大值
        dp[k][0] = 0  # 初始是不持有股票，还可以交易k次
        max_val = 0
        for price in prices:
            for j in range(k):  # 从前往后，这样可以复用dp; 不需要还可以交易k次的数据，因为dp[k][0] 和 dp[k][1] 初始值就是最大值
                dp[j][0] = max(dp[j][0], dp[j][1] + price)
                dp[j][1] = max(dp[j][1], dp[j + 1][0] - price)  # 因为j最大为k-1, 所以不需要判断j < k
                max_val = max(dp[j][0], max_val)
        return max_val
