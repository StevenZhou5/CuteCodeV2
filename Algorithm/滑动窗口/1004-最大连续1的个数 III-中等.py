# 1004. 最大连续1的个数 III
# 给定一个二进制数组 nums 和一个整数 k，如果可以翻转最多 k 个 0 ，则返回 数组中连续 1 的最大个数 。
#
#
#
# 示例 1：
#
# 输入：nums = [1,1,1,0,0,0,1,1,1,1,0], K = 2
# 输出：6
# 解释：[1,1,1,0,0,1,1,1,1,1,1]
# 粗体数字从 0 翻转到 1，最长的子数组长度为 6。
# 示例 2：
#
# 输入：nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3
# 输出：10
# 解释：[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
# 粗体数字从 0 翻转到 1，最长的子数组长度为 10。
#
#
# 提示：
#
# 1 <= nums.length <= 105
# nums[i] 不是 0 就是 1
# 0 <= k <= nums.length
class Solution:
    def longestOnes(self, nums: [int], k: int) -> int:
        # 滑动窗口
        # 时间复杂度：O(n) 左右边界最多两次遍历
        # 空间复杂度：O(1)
        n = len(nums)
        l, r = 0, 0  # [l,r] 要保证窗口内的所有值都可以为1
        res = 0
        cur_k = 0
        while r < n:
            if nums[r] == 0:
                cur_k += 1

            # 如果 0 比 k 多了一个, 移动左边界
            while cur_k > k:
                if nums[l] == 0:
                    cur_k -= 1
                l += 1

            res = max(res, r - l + 1)
            r += 1
        return res
